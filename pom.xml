<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.0.1</version>
    <!-- lookup parent from repository -->
  </parent>

  <groupId>max.demo</groupId>
  <artifactId>market-analysis</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <name>market-analysis</name>
  <description>market-analysis</description>

  <properties>
    <blockhound.version>1.0.6.RELEASE</blockhound.version>
    <git-commit-id-plugin.version>5.0.0</git-commit-id-plugin.version>
    <jackson-dataformat-csv.version>2.14.2</jackson-dataformat-csv.version>
    <jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
    <java.version>17</java.version>
    <kotlin.version>1.8.0</kotlin.version>
    <mapstruct.version>1.5.3.Final</mapstruct.version>
    <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
    <maven-enforcer-plugin.version>3.0.0-M3</maven-enforcer-plugin.version>
    <maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
    <maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
    <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <!-- Best practice is to define encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <reactor-core.version>3.5.2</reactor-core.version>
    <reactor-extra.version>3.5.0</reactor-extra.version>
    <reactor-kotlin-extensions.version>1.1.7</reactor-kotlin-extensions.version>
    <skipTests>false</skipTests>
    <sortpom-maven-plugin.version>3.0.0</sortpom-maven-plugin.version>
    <spring-boot.version>${project.parent.version}</spring-boot.version>
    <spring-cloud-openfeign.version>3.1.3</spring-cloud-openfeign.version>
    <spring-cloud.version>2022.0.0</spring-cloud.version>
    <spring-webflux.version>6.0.4</spring-webflux.version>
    <v20.version>3.0.25</v20.version>
  </properties>

  <dependencyManagement>
    <?SORTPOM IGNORE?>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
    <?SORTPOM RESUME?>
  </dependencyManagement>

  <dependencies>

    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-csv</artifactId>
      <version>${jackson-dataformat-csv.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-kotlin</artifactId>
    </dependency>

    <dependency>
      <groupId>com.oanda.v20</groupId>
      <artifactId>v20</artifactId>
      <version>${v20.version}</version>
    </dependency>

    <dependency>
      <groupId>io.projectreactor.addons</groupId>
      <artifactId>reactor-extra</artifactId>
      <version>${reactor-extra.version}</version>
    </dependency>

    <dependency>
      <groupId>io.projectreactor.kotlin</groupId>
      <artifactId>reactor-kotlin-extensions</artifactId>
      <version>${reactor-kotlin-extensions.version}</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
    </dependency>

    <!-- mapstruct mapper using interface -->
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webflux</artifactId>
      <version>${spring-webflux.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Feign Client/Resource interface-->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
      <version>${spring-cloud-openfeign.version}</version>
    </dependency>

    <dependency>
      <groupId>io.projectreactor.tools</groupId>
      <artifactId>blockhound</artifactId>
      <version>${blockhound.version}</version>
      <scope>provided</scope>
    </dependency>

    <!--    <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <scope>runtime</scope>
        </dependency>-->

    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>io.projectreactor</groupId>
      <artifactId>reactor-test</artifactId>
      <version>${reactor-core.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>

    <plugins>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>

      <!-- MAVEN enforcer: provides goals to control environmental constraints such as Maven version, JDK version, etc.
      https://maven.apache.org/enforcer/maven-enforcer-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven-enforcer-plugin.version}</version>
        <executions>
          <execution>
            <!-- enforce that the build uses Java version 17 or higher -->
            <id>default-cli</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <phase>validate</phase>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[17,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- MAVEN COMPILER
      Specifies that some dependencies are required to compile your source code;
      For example: lombok, mapstruct, etc. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>17</source>
          <target>17</target>
          <showWarnings>true</showWarnings>
          <compilerArgs>
            <arg>-Xlint:all,-serial,-processing</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <!-- Additional annotation processor for mapstruct required as of Lombok 1.18.16 -->
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok-mapstruct-binding</artifactId>
              <version>0.2.0</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <!-- Maven JAR plugin: provides the capability to build jars -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven-jar-plugin.version}</version>
      </plugin>

      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <configuration>
          <args>
            <arg>-Xjsr305=strict</arg>
          </args>
          <compilerPlugins>
            <plugin>spring</plugin>
            <plugin>jpa</plugin>
          </compilerPlugins>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-noarg</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Jacoco: test coverage metrics -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <configuration>
          <skip>${skipTests}</skip>
          <excludes>
            <exclude>**/*DemoApplication*.class</exclude>
            <exclude>**/*Config*.class</exclude>
            <exclude>**/*Properties*.class</exclude>
            <exclude>**/*Builder*.class</exclude>
            <exclude>**/*MapperImpl*.class</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>prepare-package</phase>
          </execution>
          <execution>
            <id>jacoco-default</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <includes>
                <include>com/my/${project.name}/**</include>
              </includes>
              <rules>
                <rule>
                  <element>CLASS</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.00</minimum>
                    </limit>
                    <limit>
                      <counter>BRANCH</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.00</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
          <execution>
            <id>post-integration-test</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>post-integration-test</phase>
          </execution>
        </executions>
      </plugin>

      <!-- Surefire plugin: used during the test phase of the build lifecycle **to run unit tests** & generate reports
       in 2 different files formats: *.txt & *.xml
      https://maven.apache.org/surefire/maven-surefire-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
      </plugin>

      <!-- Maven Resources Plugin: handles the copying of project resources to the output directory
      to prepare the project for deployment (here with Docker & Kube)
      https://maven.apache.org/plugins/maven-resources-plugin/ -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven-resources-plugin.version}</version>
        <configuration>
          <propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>
          <delimiters>
            <delimiter>${resource.delimiter}</delimiter>
          </delimiters>
          <useDefaultDelimiters>false</useDefaultDelimiters>
        </configuration>
        <executions>
          <execution>
            <id>filter-kube-files</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <!-- Make sure files have been downloaded before pos-integration-test -->
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/kube</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/cicd/kustomize</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>filter-dockerfile</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <!-- Make sure files have been downloaded before pos-integration-test -->
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/cicd</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/cicd</directory>
                  <filtering>true</filtering>
                  <includes>
                    <include>Dockerfile</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- SORT POM Sort & format the Pom file -->
      <plugin>
        <groupId>com.github.ekryd.sortpom</groupId>
        <artifactId>sortpom-maven-plugin</artifactId>
        <version>${sortpom-maven-plugin.version}</version>
        <configuration>
          <createBackupFile>false</createBackupFile>
          <skip>${skipTests}</skip>
          <predefinedSortOrder>custom_1</predefinedSortOrder>
          <lineSeparator>\n</lineSeparator>
          <encoding>${project.build.sourceEncoding}</encoding>
          <sortProperties>true</sortProperties>
          <sortDependencies>scope,groupId,artifactId</sortDependencies>
          <!-- Do not modify sortPlugins (can break the build) -->
          <sortPlugins>none</sortPlugins>
          <keepBlankLines>true</keepBlankLines>
          <nrOfIndentSpace>2</nrOfIndentSpace>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>sort</goal>
            </goals>
            <phase>compile</phase>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
